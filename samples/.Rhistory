res = rep(0,Y)
row = 1
for (i in 1:Y) {
for (j in (i+1):Y) {
if (j > Y) break
if (sign(sum(w[row,]*x)) == 1) {
res[i] = res[i] + 1
} else {
res[j] = res[j] + 1
}
row = row + 1
}
}
which.max(res)
}
get_vs = function(xl, c1, c2) {
l = dim(xl)[1]
n = dim(xl)[2]-1
idx1 = as.integer(xl[,n+1])==c1
idx2 = as.integer(xl[,n+1])==c2
x1 = xl[idx1,1:n]
x2 = xl[idx2,1:n]
l1 = dim(x1)[1]
l2 = dim(x2)[1]
x1 = cbind(x1, rep(1,l1))
x2 = cbind(x2, rep(1,l2))
names(x2) = names(x1)
y1 = rep(1,l1)
y2 = rep(-1,l2)
rbind(x1,x2)
list(rbind(x1,x2),c(y1,y2))
}
all_w = function(xl) {
classes = levels(xl[,n+1])
Y = length(classes)
# xl = phi(xl)
l = dim(xl)[1]
n = dim(xl)[2]-1
w = matrix(NA,nrow=Y*(Y-1)/2,ncol=n+1)
print(w)
row = 1
for (i in 1:Y) {
for (j in (i+1):Y) {
if (j > Y) break
tdata = get_vs(xl,classes[i],classes[j])
x = tdata[[1]]
y = tdata[[2]]
pts <<- matrix(NA, nrow=1, ncol=4)
w0 = runif(n+1,-0.5/l,0.5/l)
wres = rmsprop(L,dL,y,x,w0)
w[row,] = wres
row = row + 1
}
}
w
}
# train
# w = all_w(xl)
# stop()
classificationmap(function(x) a(w, matrix(x,nrow=1)), xl, "map", xfrom=-2,xto=10,yfrom=-1,yto=4,xticks=100,yticks=100)
# count errors
errs = 0
for (i in 1:l) {
if (as.integer(xl[i,n+1]) != a(w,xl[i,1:n])) {
errs = errs + 1
}
}
print(sprintf("%.2f%% errors. %d errors from %d", errs/l*100, errs, l))
i<-sample(1:nrows, 1)
eps <- (w*x - y)**2
w <- w - temp*(w*x - y)*x
w <- w - temp*(w*x - y)*x
i<-sample(1:nrows, 1)
i
learn.adaline <- function(xl, u, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
}
}
learn.adaline(xl, 0.1,1,10)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
}
w
}
learn.adaline(xl, 0.1,1,10)
learn.adaline(xl, 0.1,1,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w + temp*(t(w)*x - y)*x
}
w
}
learn.adaline(xl, 0.1,1,100)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
}
w
}
learn.adaline(xl, 0.1,1,100)
xl
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.1,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline <- function(xl, temp, lambda, iter){
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
while(Q<0.01){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (1-lamba)*Q+lambda*eps
}
w
}
learn.adaline <- function(xl, temp, lambda, iter){
)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
while(Q<0.01){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (1-lamba)*Q+lambda*eps
}
w
}
learn.adaline <- function(xl, temp, lambda, iter){
)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,1,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.1,100)
learn.adaline(xl, 0.01,0.01,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (q-lamba)*Q+lambda*eps
}
w
}
learn.adaline(xl, 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (q-lamba)*Q+lambda*eps
}
w
}
learn.adaline(xl, 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
while(Q<0.01){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (q-lambda)*Q+lambda*eps
}
w
}
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (q-lambda)*Q+lambda*eps
}
w
}
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
eps <- (w*x - y)**2
w <- w - temp*(t(w)*x - y)*x
Q <- (1-lambda)*Q+lambda*eps
}
w
}
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(xl, 0.01,0.5,100)
learn.adaline(data.frame(-1, xl), 0.01,0.5,100)
learn.adaline(data.frame(-1, xl), 0.01,0.5,100)
learn.adaline(data.frame(-1, xl), 0.01,0.5,100)
learn.adaline(data.frame(-1, xl), 0.01,0.5,100)
lic.adaline <- function(xl, u, w){
sign(w*t(u))
}
plot(pl, col=colors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(pl, col=colors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(pl, col=colors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
dev.off()
dev.off()
plot(pl, col=colors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
lattice(lic.adaline.fisher, sel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, xl), 0.01,0.5,100))
lattice(lic.adaline, sel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, xl), 0.01,0.5,100))
lattice(lic.adaline, sel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, xl), 0.01,0.5,100))
lcolors <- c(-1="red", 1="green")
lcolors <- c("red", "green")
names(lcolors)<-c(-1,1)
lcolors
lsel<-sel
lsel[,3] <- as.vector(sel$Species == "setosa")*2-1
lsel
plot(lsel, col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(lsel[,1:2], col=lcolors[lsel[,3]], pch=19, main="Parzen K=Triangular, h=0.4")
plot(lsel[,1:2], col=lcolors[lsel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(lsel[,1:2], col=lcolors[lsel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
lattice(lic.adaline, lsel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
w <- w - temp*(t(w)*x - y)*x
}
w
}
lattice(lic.adaline, lsel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lattice(lic.adaline, lsel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lcolors <- c("red", "green")
names(lcolors)<-c(-1,1)
lsel<-sel
lsel[,3] <- as.vector(sel$Species == "setosa")*2-1
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
lattice(lic.adaline, lsel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lattice(lic.adaline, lsel, colors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lattice(lic.adaline, lsel, lcolors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lattice(lic.adaline, lsel, lcolors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lattice(lic.adaline, lsel, lcolors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
lattice(lic.adaline, lsel, lcolors, mi, ma, 0.1, learn.adaline(data.frame(-1, lsel), 0.01,0.5,100))
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
line
lines
lines(c(3,0), c(1,2))
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
w <- w - temp*(t(w)*x - y)*x
lines(c(0, w[1]/w[2]), c(w[1]/w[3], 0))
}
w
}
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-sample(1:nrows, 1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
w <- w - temp*(t(w)*x - y)*x
lines(c(0, -w[1]/w[2]), c(-w[1]/w[3], 0))
}
w
}
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
3%2
3 mod 2
mod(3,2)
3 %%2
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
for(j in 1:iter){
print(w)
i<-(i+1)%%(nrows+1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
w <- w - temp*(t(w)*x - y)*x
lines(c(0, -w[1]/w[2]), c(-w[1]/w[3], 0))
}
w
}
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline <- function(xl, temp, lambda, iter){
ncols <- ncol(xl)-1
nrows <- nrow(xl)
classes <- names(table(xl[,ncols+1]))
w <- rep(0, ncols)
Q <- sqrt(sum((w%*%t(xl[,1:ncols])-t(xl[,ncols+1]))**2))
i<-0
for(j in 1:iter){
print(w)
i<-(i+1)%%(nrows+1)
x<-xl[i,1:ncols]
y<-xl[,ncols+1]
w <- w - temp*(t(w)*x - y)*x
lines(c(0, -w[1]/w[2]), c(-w[1]/w[3], 0))
}
w
}
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,200)
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,170)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,170)
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,150)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,100)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,150)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.01,0.5,150)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.1,0.5,150)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.1,0.5,150)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.1,0.5,15)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.1,0.5,100)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,100)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,10)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,30)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,50)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,500)
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,500)
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,500)
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,500)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,50)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,1000)
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Parzen K=Triangular, h=0.4")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,100)
plot(sel, col=colors[sel$Species], pch=19, main="Adaline, t=0.05, 100 iterations")
plot(lsel[,1:2], col=lcolors[sel$Species], pch=19, main="Adaline, t=0.05, 100 iterations")
w<-learn.adaline(data.frame(-1, lsel), 0.05,0.5,100)
png('adaline.png', width=w, height=h)
lcolors <- c("red", "green")
names(lcolors)<-c(-1,1)
png('adaline.png', width=w, height=h)
dev.off()
png('adaline.png', width=w, height=h)
plot(pl, col=colors[sel$Species], pch=19, main="Fisher")
lattice(bc.fisher, sel, colors, mi, ma, 0.1, bc.apr(sel), bc.m(sel))
